import telebot
# –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
import schedule
# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
from threading import Thread
# –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
from TgToken import TOKEN
# –†–∞–±–æ—Ç–∞ —Å sqlite –∏ –∫—É—Ä—Å–æ—Ä–æ–º
from Gibbon_sqlite import timers, create_connection, execute_query, execute_read_query
# –î–æ–ø —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Ç–≥ –ø–∞–Ω–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
from utils.sched import *
from utils.kb import *
from utils.send_file import *
from utils.check import *

import re

from utils.sql_orm import *


bot = telebot.TeleBot(TOKEN)
count_sched = 1
answCommand = ["üìÑ –î–æ–∫—É–º–µ–Ω—Ç", "‚è± –¢–∞–π–º–µ—Ä", "üóì –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π", "‚åõ –°—Ç–æ–ø", '–ú–µ–Ω—é']
schedList = []


@bot.message_handler(commands=['sendGroup'],func=check_admin)
def stepSendMsg(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ id –≥—Ä—É–ø–ø—ã")
    bot.register_next_step_handler(msg, idMsg)

def idMsg(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.register_next_step_handler(msg, sendMsg, message.text)

def sendMsg(message, id):
    bot.send_message(id, message.text)


@bot.message_handler(content_types=["text"], func=check_user)
def start(message):
    bot.send_message(message.chat.id, message.text)


@bot.message_handler(commands=['start'], func=check_admin)
def welcome(message):
    for tm in timers:
        if f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {tm[2]}" not in answCommand:
            timer_sched(tm[1], tm[2], send_f, bot, message.chat.id)
            schedList.append(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {tm[2]}")

    mark = keyboard(answCommand[:3])

    bot.send_message(message.chat.id, "Choose one letter:", reply_markup=mark)


@bot.message_handler(content_types=["text"],func=check_admin)
def start(message):
    if message.text == answCommand[0]:
        doc = open('Files/CW14.pdf', 'rb')

        wait = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ...')

        bot.send_document(message.chat.id, doc)
        bot.delete_message(message.chat.id, wait.message_id)

    elif message.text == answCommand[1]:
        mesg = bot.send_message(message.chat.id,'–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(mesg, idGroupForTimer)

    elif message.text == answCommand[2]:
        mark = keyboard(schedList + answCommand[-1:])
        bot.send_message(message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫", reply_markup=mark)

    elif message.text == answCommand[3]:
        if answCommand[4:]:
            for i in schedList:
                schedList.remove(i)

        mark = keyboard(answCommand)
        schedule.clear()
        bot.send_message(message.chat.id, "–¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–∏–ª—Å—è", reply_markup=mark)

    elif message.text == answCommand[-1]:
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=keyboard(answCommand[:-1]))

    elif re.search(r"^–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", message.text):
        selectSched = f'''
        SELECT
            schedule
        FROM
            Timer
         WHERE
            name='{message.text.split()[1]}'
        '''

        timer = execute_read_query(selectSched)

        markup = keyboard([f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text[11:]}", f"–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text[11:]}", f"–ü–æ–º–µ–Ω—è—Ç—å –¥–∞—Ç—É –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text[11:]}"])
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞: {timer[0][0]}")
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=markup)

    elif re.search(r"^‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", message.text):
        deleteSched = Select().where(f"name='{message.text[13:]}'")

        try:
            if not len(schedule.get_jobs()):
                markup = keyboard(answCommand[:3])

            elif len(schedule.get_jobs()) == 1:
                markup = keyboard(answCommand[:3])
                answCommand.remove(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text[13:]}")

                execute_query(deleteSched)

                schedule.clear(f"timer{message.text[13:]}")

            else:
                answCommand.remove(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text[13:]}")
                markup = keyboard(answCommand[1:2] + answCommand[3:])

                execute_query(deleteSched)

                schedule.clear(f"timer{message.text[13:]}")

            bot.send_message(message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text[13:]} —É–¥–∞–ª–∏–ª–∏", reply_markup=markup)

        except Exception:
            bot.send_message(message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text[13:]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


    elif re.search(r"^–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", message.text):
        msg = bot.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
        bot.register_next_step_handler(msg, changeSched, message.text[24:], "name")


    elif re.search(r"^–ü–æ–º–µ–Ω—è—Ç—å –¥–∞—Ç—É –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", message.text):
        msg = bot.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É")
        bot.register_next_step_handler(msg, changeSched, message.text[25:], "schedule")


    else:
        bot.send_message(message.chat.id, "üôà", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.from_user.id, '–ö–æ–º–∞–Ω–¥—ã: /start')
        bot.send_message(message.from_user.id, 'Sms –≤ –≥—Ä—É–ø–ø—É: /sendGroup')


def changeSched(message, name, field):
    schedule.clear(f"timer{name}")

    if field == 'name':
        answCommand[answCommand.index(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {name}')] = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {message.text}'

        selectSched = Select().where(f"name='{name}'")

        sched = execute_read_query(selectSched)

        timer_sched(sched[0][1], message.text, send_f, bot, message.chat.id)
    else:
        timer_sched(message.text, name, send_f, bot, message.chat.id)

    markup = keyboard(answCommand[1:2] + schedList)

    changeNameSched = Update(f"{field}='{message.text}'").where(f" name='{name}'")

    execute_query(changeNameSched)

    bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–ª–∏", reply_markup=markup)


def idGroupForTimer(message):
        mesg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ id –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        bot.register_next_step_handler(mesg, nameTimer, message.text)


def nameTimer(message, id_group):
        if not re.search(r'-?\d+', message.text):
            bot.send_message(message.chat.id, 'üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id"')
        else:
            mesg = bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ format: –î–ù/–î–ù –ß–ß:MM/–ß–ß:MM exmp. –≤—Ç/–ø—Ç 02:05/05:00')
            bot.register_next_step_handler(mesg, stepTimer, message.text, id_group)


def stepTimer(message, id_group, name):
    markup = keyboard(answCommand[1:2] + answCommand[3:])

    createSched = Insert(schedule=message.text, name=name, id_group=id_group)

    if re.search(r"^([–∞-—è]{2}\/?)+\s+(\d{2}:\d{2}\/?)+$", message.text):
        execute_query(createSched)

        timer_sched(message.text, name, send_f, bot, id_group)

        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å–∞–ª–∏ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup=keyboard(answCommand[:-1]))
    else:
        bot.send_message(message.chat.id, "üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞", reply_markup=markup)


if __name__ == "__main__":
    test = Thread(target=schedule_checker)
    test.daemon = True
    test.start()

    print("TgBot started")

    bot.polling(none_stop=True, interval=0)